name: 'Build Arch packages'
description: 'Build Arch Linux packages'
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
    default: 'FAIL'
runs:
  using: "composite"
  steps:
    # https://github.com/marketplace/actions/checkout
    - name: Checkout repo
      uses: actions/checkout@v4

    # https://github.com/marketplace/actions/cache
    # github actions caching here doesn't actually work in practice because the dockerfile uses --mount=type=cache
    # and we have https://github.com/moby/buildkit/issues/1512#issuecomment-1192878530
    # something like https://github.com/moby/buildkit/issues/1512#issuecomment-1319736671 would probably need to be deployed in the dockerfile
    - name: Cache pacman db
      uses: actions/cache@v4
      id: buildx-cache
      with:
        path: ${{ github.workspace }}/out/cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Get current date
      id: date
      shell: bash
      run: echo "TODAY_IS=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Generate version string
      id: versionstring
      shell: bash
      run: echo "THIS_VERSTRING=${{ env.TODAY_IS }}.0.${{ github.run_number }}" >> $GITHUB_ENV

    - name: Get Actions Bot ID
      id: gbid
      shell: bash
      if: github.event_name != 'pull_request'
      run: |
        curl --silent \
        --url https://api.github.com/users/$(printf %s "${ACTIONS_BOT_NAME}"|jq -sRr @uri) \
        --output bot_info.json
        echo "bot-id=$(cat bot_info.json | jq --raw-output '.id')" >> $GITHUB_OUTPUT

    - name: Set build version
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "Setting version ${THIS_VERSTRING}"
        echo "${THIS_VERSTRING}" > automated_build_number.txt
        git config --global user.name "${ACTIONS_BOT_NAME%[*}"
        git config --global user.email "${{ steps.gbid.outputs.bot-id }}+${ACTIONS_BOT_NAME}@users.noreply.github.com"
        git add . :!bot_info.json
        git commit -m "set build version ${{ env.THIS_VERSTRING }}"

    # https://github.com/marketplace/actions/docker-setup-buildx
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: touch cache
      id: tc
      shell: bash
      run: |
        mkdir -p out/cache

    # https://github.com/marketplace/actions/build-and-push-docker-images
    # github actions caching here doesn't actually work in practice because the dockerfile uses --mount=type=cache
    # and we have https://github.com/moby/buildkit/issues/1512#issuecomment-1192878530
    # something like https://github.com/moby/buildkit/issues/1512#issuecomment-1319736671 would probably need to be deployed in the dockerfile
    - name: Build only the new packages
      id: build
      uses: docker/build-push-action@v6
      with:
        target: export
        outputs: type=local,dest=out
        context: ${{ github.action_path }}
        build-contexts: |
          packages=.
          cache=out/cache
        #cache-from: type=gha
        #cache-to: type=gha,mode=max
        #cache-from: type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    # github actions caching here doesn't actually work in practice because the dockerfile uses --mount=type=cache
    # and we have https://github.com/moby/buildkit/issues/1512#issuecomment-1192878530
    # something like https://github.com/moby/buildkit/issues/1512#issuecomment-1319736671 would probably need to be deployed in the dockerfile
    #- name: Move cache
    #  shell: bash
    #  run: |
    #    ls -alh  /tmp/.buildx*
    #    rm -rf /tmp/.buildx-cache
    #    mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Tag & Push
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        git tag -a "v${{ env.THIS_VERSTRING }}" -m "Build ${{ env.THIS_VERSTRING }}"
        git push -u origin $(git rev-parse --abbrev-ref HEAD) --tags

    # https://docs.github.com/en/rest/reference/releases#create-a-release
    - name: Make release and upload assets
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        curl --silent \
          --url https://api.github.com/repos/${{ github.repository }}/releases \
          --header 'authorization: Bearer ${{ inputs.github-token }}' \
          --header "Accept: application/vnd.github.v3+json" \
          --data '{"draft":false,"tag_name":"v${{ env.THIS_VERSTRING }}","name":"${{ env.THIS_VERSTRING }}"}' \
          --output rel_resp.json
        echo "Release Done."
        ASSET_UL_URL=$(cat rel_resp.json | jq --raw-output '.upload_url' | sed "s|{?.*||g")
        ASSET_UL_URL="${ASSET_UL_URL}?name=asset"
        rm -rf out/provenance.json  # what's this?
        do_asset_things() {
          local ASSET_FILE="${1}"
          # upload asset
          echo "Uploading asset..."
          # https://docs.github.com/en/rest/reference/releases#upload-a-release-asset
          curl --silent \
            --url "${ASSET_UL_URL}" \
            --header 'authorization: Bearer ${{ inputs.github-token }}' \
            --header "Accept: application/vnd.github.v3+json" \
            --header "Content-Type: $(file --brief --mime-type ${ASSET_FILE})" \
            --data-binary @${ASSET_FILE} \
            --output asset_resp.json
          ASSET_URL=$(cat asset_resp.json | jq --raw-output '.url')
          echo "Asset upload done."

          # update asset
          ASSET_NAME="$(basename ${ASSET_FILE})"
          echo "Updating asset..."
          jq -n --arg arg_name "${ASSET_NAME}" '{"name":$arg_name}' | curl --silent \
            --request PATCH \
            --url "${ASSET_URL}" \
            --header 'authorization: Bearer ${{ inputs.github-token }}' \
            --header "Accept: application/vnd.github.v3+json" \
            --data @- \
            --output asset_update.json
          echo "Asset update done."
          if test "$(cat asset_update.json | jq --raw-output '.name')"x != "${ASSET_NAME}"x
          then
            echo "Could not verify asset update"
            exit -1
          fi
        }
        export -f do_asset_things
        find out -maxdepth 1 -type f -exec bash -c 'do_asset_things "$0"' "{}" \;
