name: 'Build Arch packages'
description: 'Build Arch Linux packages'
inputs:
  github-token:
    description: 'GitHub Token'
    required: true
    default: 'FAIL'
runs:
  using: "composite"
  steps:
    # https://github.com/marketplace/actions/checkout
    - name: Checkout repo
      uses: actions/checkout@v4

    # https://github.com/marketplace/actions/cache
    # TODO: figure out how to use ${{ hashFiles('out/cache/*') }} with this
    - name: Cache pacman db
      uses: actions/cache@v4
      id: buildx-cache
      with:
        path: ${{ github.workspace }}/out/cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: move cache
      id: mc
      shell: bash
      run: |
        if test -d out/cache; then
          mv out/cache /tmp/some_cache
        else
          mkdir /tmp/some_cache
        fi

    # clear the cache if it was a manual run
    - name: bust cache
      id: bc
      if: ${{ github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: rm -rf /tmp/some_cache/*

    - name: Get current date
      id: date
      shell: bash
      run: echo "TODAY_IS=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Generate version string
      id: versionstring
      shell: bash
      run: echo "THIS_VERSTRING=${{ env.TODAY_IS }}.0.${{ github.run_number }}" >> $GITHUB_ENV

    - name: Get Actions Bot ID
      id: gbid
      shell: bash
      if: github.event_name != 'pull_request'
      run: |
        curl --silent \
        --url https://api.github.com/users/$(printf %s "${ACTIONS_BOT_NAME}"|jq -sRr @uri) \
        --output bot_info.json
        echo "bot-id=$(cat bot_info.json | jq --raw-output '.id')" >> $GITHUB_OUTPUT

    - name: Set build version
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "Setting version ${THIS_VERSTRING}"
        echo "${THIS_VERSTRING}" > automated_build_number.txt
        git config --global user.name "${ACTIONS_BOT_NAME%[*}"
        git config --global user.email "${{ steps.gbid.outputs.bot-id }}+${ACTIONS_BOT_NAME}@users.noreply.github.com"
        git add . :!bot_info.json
        git commit -m "set build version ${{ env.THIS_VERSTRING }}"

    - name: touch cache
      id: tc
      shell: bash
      run: mkdir -p out/cache

    # https://github.com/marketplace/actions/docker-setup-buildx
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # https://github.com/marketplace/actions/build-and-push-docker-images
    # github actions caching here doesn't actually work in practice because the dockerfile uses --mount=type=cache
    # and we have https://github.com/moby/buildkit/issues/1512#issuecomment-1192878530
    # something like https://github.com/moby/buildkit/issues/1512#issuecomment-1319736671 would probably need to be deployed in the dockerfile
    - name: Build only the new packages
      id: build
      uses: docker/build-push-action@v6
      with:
        target: export
        allow: security.insecure
        outputs: type=local,dest=out
        context: ${{ github.action_path }}
        build-contexts: |
          packages=.
          cache=/tmp/some_cache
        #cache-from: type=gha
        #cache-to: type=gha,mode=max
        #cache-from: type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Get assets
      id: getass
      shell: bash
      run: |
        rm -rf out/provenance.json  # what's this?
        echo "ASSETS=$( ls -p out | grep -v / | grep -v '.src.tar.gz' | sed 's,\.pkg\.tar\.zst,,' | tr '\n' ' ' )" >> $GITHUB_ENV

    - name: Tag & Push
      if: ${{ github.event_name != 'pull_request' && env.ASSETS != 0 }}
      shell: bash
      run: |
        echo "Assets is \"{{ env.ASSETS }}\""
        ls -al out
        git tag -a "v${{ env.THIS_VERSTRING }}" -m "Build ${{ env.THIS_VERSTRING }}"
        git push -u origin $(git rev-parse --abbrev-ref HEAD) --tags

    # https://docs.github.com/en/rest/reference/releases#create-a-release
    - name: Make release and upload assets
      if: ${{ github.event_name != 'pull_request' && env.ASSETS != 0 }}
      shell: bash
      run: |
        echo "Creating release..."
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github-token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"v${{ env.THIS_VERSTRING }}","name":"${{ env.THIS_VERSTRING }}","body":"${{ env.ASSETS }}"' \
          --output rel_resp.json
        ASSET_UL_URL=$(cat rel_resp.json | jq --raw-output '.upload_url' | sed "s|{?.*||g")
        echo "Release Done, asset uploads will be made to ${ASSET_UL_URL}"        
        rm -rf out/provenance.json  # what's this?

        do_asset_things() {
          local ASSET_FILE="$(realpath "${1}")"
          local AUU="${2}"
          ASSET_NAME="$(basename ${ASSET_FILE})"
          ASSET_UL_URL="${AUU}?name=${ASSET_NAME}"
          
          # upload asset
          echo "Uploading asset ${ASSET_FILE} to ${ASSET_UL_URL}"
          # https://docs.github.com/en/rest/reference/releases#upload-a-release-asset
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.github-token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: $(file --brief --mime-type ${ASSET_FILE})" \
            "${ASSET_UL_URL}" \
            --data-binary "@${ASSET_FILE}" \
            --output asset_resp.json
          ASSET_URL=$(cat asset_resp.json | jq --raw-output '.url')
          echo "Asset upload done."
        }
        export -f do_asset_things

        find out -maxdepth 1 -type f,l -exec bash -c 'do_asset_things "${0}" "${1}"' "{}" "${ASSET_UL_URL}" \;

        
